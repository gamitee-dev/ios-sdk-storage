#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef JOYNEDMOBILESDK_SWIFT_H
#define JOYNEDMOBILESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JoynedMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)




@class NSCoder;

///
SWIFT_CLASS_NAMED("_JControl")
@interface _JControl : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)aFame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aCoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
@end

@class UIColor;
@class UIView;

/// A Joyned UI class used to manage a Card like display element, supports border, shadow, corner cliping & more
IB_DESIGNABLE
SWIFT_CLASS_NAMED("_JCardControl")
@interface _JCardControl : _JControl
/// Determins if the card content should have a background color, defaults to false
@property (nonatomic) IBInspectable BOOL contentColorEnabled;
/// The color to be used for card UI background color, only takes effect if the <code>contentColorEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull contentColor;
/// Determins if the card content should have a border drawn or not, defaults to false
@property (nonatomic) IBInspectable BOOL isBorderEnabled;
/// Controls the border’s width paramater, only takes effect if the <code>isBorderEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable CGFloat borderWidth;
/// Controls the border’s color paramater, only takes effect if the <code>isBorderEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull borderColor;
/// Determins if the card content should have a shadow outline or not, defaults to false
@property (nonatomic) IBInspectable BOOL isShadowEnabled;
/// The radius of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable CGFloat shadowRadius;
/// The opacity level of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable float shadowOpacity;
/// The offset  of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable CGSize shadowOffset;
/// The color to be used for card UI shadow color, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull shadowColor;
/// Determins if the card content should its corners cliped or not, defaults to false
@property (nonatomic) IBInspectable BOOL isShapeEnabled;
/// The corner clipping radius, used for card UI clipping system. Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable CGFloat shapeRadius;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (void)awakeFromNib;
- (void)layoutSubviews;
- (BOOL)hasSubview:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)addSubview:(UIView * _Nonnull)view;
@end

@protocol JoynedButtonDelegate;

/// A Joyned UI element meant for usage in the host application, acts as a card like display element, supports border, shadow, corner cliping & more
IB_DESIGNABLE
SWIFT_CLASS_NAMED("JoynedButton")
@interface JoynedButton : _JCardControl
/// Determins if the card content should have a background color, defaults to false
@property (nonatomic) IBInspectable BOOL contentColorEnabled;
/// The color to be used for card UI background color, only takes effect if the <code>contentColorEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull contentColor;
/// Determins if the card content should have a border drawn or not, defaults to false
@property (nonatomic) IBInspectable BOOL isBorderEnabled;
/// Controls the border’s width paramater, only takes effect if the <code>isBorderEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable CGFloat borderWidth;
/// Controls the border’s color paramater, only takes effect if the <code>isBorderEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull borderColor;
/// Determins if the card content should have a shadow outline or not, defaults to false
@property (nonatomic) IBInspectable BOOL isShadowEnabled;
/// The radius of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable CGFloat shadowRadius;
/// The opacity level of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable float shadowOpacity;
/// The offset  of the shadow used by the card UI, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Zero by default.
@property (nonatomic) IBInspectable CGSize shadowOffset;
/// The color to be used for card UI shadow color, only takes effect if the <code>isShadowEnabled</code> is set to <code>true</code>.
/// Transperent by default.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull shadowColor;
/// Determins if the card content should its corners cliped or not, defaults to false
@property (nonatomic) IBInspectable BOOL isShapeEnabled;
/// The corner clipping radius, used for card UI clipping system. Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable CGFloat shapeRadius;
/// Indicates if the top left corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipTopLeft;
/// Indicates if the top right corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipTopRight;
/// Indicates if the bottom left corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipBottomLeft;
/// Indicates if the bottom right corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipBottomRight;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, weak) IBOutlet id <JoynedButtonDelegate> _Nullable delegate;
/// Creates a control with the specified frame.
/// \param frame the size of the view
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Creates a control from data in an unarchiver.
/// \param aCoder An archiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aCoder OBJC_DESIGNATED_INITIALIZER;
/// Encodes the receiver using a given archiver.
/// \param aCoder An archiver object.
///
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// Prepares the receiver for service after it has been loaded from an Interface Builder archive, or nib file.
- (void)awakeFromNib;
/// Adds a view to the end of the receiver’s list of subviews.
/// Note, this view has an internal container that holds the subview, this allows adding shadow & clip the corners as well
/// \param view The view to be added. After being added, this view appears on top of any other subviews.
///
- (void)addSubview:(UIView * _Nonnull)view;
/// Returns true if the passed view is a subview of the reciver
/// Note, this view has an internal container that holds the subview, this allows adding shadow & clip the corners as well
/// \param view The view to be tested
///
///
/// returns:
/// True if the passed view is a subview of the reciver
- (BOOL)hasSubview:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Lays out subviews.
/// The default implementation of this method does nothing on iOS 5.1 and earlier. Otherwise, the default implementation uses any constraints you have set to determine the size and position of any subviews.
/// Subclasses can override this method as needed to perform more precise layout of their subviews. You should override this method only if the autoresizing and constraint-based behaviors of the subviews do not offer the behavior you want. You can use your implementation to set the frame rectangles of your subviews directly.
/// You should not call this method directly. If you want to force a layout update, call the setNeedsLayout() method instead to do so prior to the next drawing update. If you want to update the layout of your views immediately, call the layoutIfNeeded() method.
- (void)layoutSubviews;
@end

@class NSIndexPath;
@class JoynedOfferingRequest;

/// Methods for managing JoynedButton behavior, allows the system a way to pass navigation requests & more
SWIFT_PROTOCOL_NAMED("JoynedButtonDelegate")
@protocol JoynedButtonDelegate <NSObject>
@optional
/// Called when the User clicks the button, before presenting any SDK content , after validations
- (void)willPresentMobileSDKContent;
/// Called when the User clicks the button, if the button is contained within a <code>UITableView</code> and is visiable on screen
/// Asks for the relevent product offering, provides the index path associated with the button
/// Note: Only one method will be called out of the TableView/CollectionView/Location related methods
- (JoynedOfferingRequest * _Nullable)joynedButton:(JoynedButton * _Nonnull)button productOfferingForRaw:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Called when the User clicks the button, if the button is contained within a <code>UICollectionView</code> and is visiable on screen
/// Asks for the relevent product offering, provides the index path associated with the button
/// Note: Only one method will be called out of the TableView/CollectionView/Location related methods
- (JoynedOfferingRequest * _Nullable)joynedButton:(JoynedButton * _Nonnull)button productOfferingForItem:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Called when the User clicks the button,
/// Asks for the relevent product offering, provides the touch location associated with the button, in the window coordinatespace
/// Note: Only one method will be called out of the TableView/CollectionView/Location related methods
- (JoynedOfferingRequest * _Nullable)joynedButton:(JoynedButton * _Nonnull)button productOfferingFor:(CGPoint)location SWIFT_WARN_UNUSED_RESULT;
@end


/// Common base class for handling offering related data
SWIFT_CLASS_NAMED("_JoynedOfferingData")
@interface _JoynedOfferingData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDictionary;
@class NSString;

/// A data object containing the offering information to be reported to the Joyned servers
SWIFT_CLASS_NAMED("JoynedOfferingRequest")
@interface JoynedOfferingRequest : _JoynedOfferingData
/// A dictionary containing the original offering data
@property (nonatomic, strong) NSDictionary * _Nonnull originalOffering;
/// A dictionary containing the extra appliction data, may be used for in-app navigation logic
@property (nonatomic, strong) NSDictionary * _Nonnull extraAppContent;
/// A JSON string representation of the offering original content payload
@property (nonatomic, readonly, copy) NSString * _Nullable originalOfferingJSON;
/// A JSON string representation of the offering extra application content payload
@property (nonatomic, readonly, copy) NSString * _Nullable extraAppContentJSON;
/// Returns an Offering Request object with imutable payload
/// \param data offering data to be processed by the system, in NSDictionary format
///
/// \param appdata extra application  data to be processed by the system, in NSDictionary format
///
- (nonnull instancetype)initWithOfferingDictionary:(NSDictionary * _Nonnull)data extraDictionary:(NSDictionary * _Nonnull)appdata OBJC_DESIGNATED_INITIALIZER;
/// Returns an Offering Request object with imutable payload
/// \param data offering data to be processed by the system, in [String: Any] format
///
/// \param appdata extra application  data to be processed by the system, in [String: Any] format
///
- (nonnull instancetype)initWithOffering:(NSDictionary<NSString *, id> * _Nonnull)data extra:(NSDictionary<NSString *, id> * _Nonnull)appdata;
/// Returns an Offering Request object with imutable payload
/// \param data offering data to be processed by the system, in JSON format, parsed as part of the creation process
///
/// \param appdata extra application  data to be processed by the system, in JSON format, parsed as part of the creation process
///
- (nullable instancetype)initWithOfferingString:(NSString * _Nonnull)offeringJSON extraString:(NSString * _Nonnull)appdataJSON;
@end

@class NSURL;

/// A data object containing the offering response as reported by the Joyned servers
SWIFT_CLASS_NAMED("JoynedOfferingResponse")
@interface JoynedOfferingResponse : _JoynedOfferingData
/// A dictionary containing the original offering data
@property (nonatomic, strong) NSDictionary * _Nonnull originalOffering;
/// A dictionary containing the extra appliction data, may be used for in-app navigation logic
@property (nonatomic, strong) NSDictionary * _Nonnull extraAppContent;
/// A JSON string representation of the offering original content payload
@property (nonatomic, readonly, copy) NSString * _Nullable originalOfferingJSON;
/// A JSON string representation of the offering extra application content payload
@property (nonatomic, readonly, copy) NSString * _Nullable extraAppContentJSON;
/// The offering direct URL as contained in the <code>originalOffering</code> dictionary
@property (nonatomic, readonly, copy) NSURL * _Nullable directUrl;
@end

@protocol JoynedSDKDelegate;
@class JoynedTransactionRequest;
@class UIScene;
@class UISceneSession;
@class UISceneConnectionOptions;
@class UIOpenURLContext;
@class NSUserActivity;

/// The main public access class to ther Joyned mobile SDK, use it to interact with the system
SWIFT_CLASS_NAMED("JoynedSDK")
@interface JoynedSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Returns the SDK version in the following template <code>x.y.z (buildNumber)</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull libraryVersion;)
+ (NSString * _Nonnull)libraryVersion SWIFT_WARN_UNUSED_RESULT;
/// The delegate of the SDK used for general control hooks into the system.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <JoynedSDKDelegate> _Nullable delegate;)
+ (id <JoynedSDKDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <JoynedSDKDelegate> _Nullable)newValue;
/// Use this method for manual activation of the SDK
/// \param activationKey The key used for activation process, contact Customer success for details
///
+ (void)activateWithActivationKey:(NSString * _Nonnull)activationKey;
/// Use this method to make the system hide the floating SDK UI elements
+ (void)hideDisplay;
/// Use this method to make the system show the floating SDK UI elements, if they have been hidden before
+ (void)showDisplay;
/// Use this method to trigger a minimize action on the floating SDK UI elements,
/// Works the same as if thw user taped on the appropriate button in the display
+ (void)minimizeDisplay;
/// Use this method to add a new screen name to the system white list
/// On screens which appear in the whitelist the Joyned mobile SDK will present it’s floating content,
/// Note: If no screens are in the white list the system will ignore its limitations
/// \param screen new screen name to add to the valid screens list
///
+ (void)appendWithWhiteList:(NSString * _Nonnull)screen;
/// Use this method to remove a screen name to the system white list
/// On screens which appear in the whitelist the Joyned mobile SDK will present it’s floating content,
/// Note: If no screens are in the white list the system will ignore its limitations
/// \param screen screen name to remove from the valid screens list
///
+ (void)removeWithWhiteList:(NSString * _Nonnull)screen;
/// Use this method to add a new screen name to the system black list
/// On screens which appear in the blacklist the Joyned mobile SDK will not present it’s floating content,
/// Note: If no screens are in the black list the system will ignore its limitations
/// \param screen new screen name to add to the invalid screens list
///
+ (void)appendWithBlackList:(NSString * _Nonnull)screen;
/// Use this method to remove a  screen name to the system black list
/// On screens which appear in the blacklist the Joyned mobile SDK will not present it’s floating content,
/// Note: If no screens are in the black list the system will ignore its limitations
/// \param screen screen name to remove fro the invalid screens list
///
+ (void)removeWithBlackList:(NSString * _Nonnull)screen;
/// Use this method to clear the invalid screen names from the system black list
+ (void)clearScreensBlackList;
/// Use this method to generate a new instance of <code>JoynedButton</code>
/// \param frame The frame of the new view in it’s parent coorinate space
///
///
/// returns:
/// New intance of <code>JoynedButton</code>
+ (JoynedButton * _Nonnull)generateJoynedButtonWithFrame:(CGRect)frame with:(id <JoynedButtonDelegate> _Nullable)delegate;
/// Call this method to report purchase transactions to the Joyned SDK
/// \param request a transaction object
///
+ (void)reportWithTransaction:(JoynedTransactionRequest * _Nullable)request;
/// Call this method from the <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3197914-scene/"><code>UISceneDelegate.scene(_:willConnectTo:options:)</code></a>
/// method of your application scene delegate. It should be invoked for the proper processing of Joyned related content.
/// \code
/// Note: This method handles the case where a deeplink launches the host application
///
/// \endcode\param scene The scene object being connected to your app.
///
/// \param session The session object containing details about the scene’s configuration.
///
/// \param connectionOptions Additional options for configuring the scene.
/// Use the information in this object to handle actions that caused the creation of the scene, for example, to respond to a quick action selected by the user.
///
///
/// returns:
/// true if the connectionOptions payload contains Joyned related code, otherwise false
+ (BOOL)scene:(UIScene * _Nonnull)scene willConnectTo:(UISceneSession * _Nonnull)session options:(UISceneConnectionOptions * _Nonnull)connectionOptions;
/// Call this method from the <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3238059-scene/"><code>UISceneDelegate.scene(_:openURLContexts:)</code></a>
/// method of your application scene delegate. It should be invoked for the proper processing of Joyned related content.
/// \code
/// Note: This method handles the case where a deeplink (custom schema) is clicked while the host application is already running
///
/// \endcode\param scene The scene object being connected to your app.
///
/// \param URLContexts One or more UIOpenURLContext objects.
/// Each object contains one URL to open and any additional information needed to open that URL.
///
///
/// returns:
/// true if the connectionOptions payload contains Joyned related code, otherwise false
+ (BOOL)scene:(UIScene * _Nonnull)scene openURLContexts:(NSSet<UIOpenURLContext *> * _Nonnull)URLContexts;
/// Call this method from the <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3238056-scene/"><code>UISceneDelegate.scene(_:continue:)</code></a>
/// method of your application scene delegate. It should be invoked for the proper processing of Joyned related content.
/// \code
/// Note: This method handles the case where a deeplink (universal link) is clicked while the host application is already running
///
/// \endcode\param scene The scene object being connected to your app.
///
/// \param userActivity The object containing the activity-related data.
/// Use the information in this object to continue the user’s activity in your scene.
///
///
/// returns:
/// true if the connectionOptions payload contains Joyned related code, otherwise false
+ (BOOL)scene:(UIScene * _Nonnull)scene continue:(NSUserActivity * _Nonnull)userActivity;
@end


/// The Joyned mobile SDK main delegation protocol, implement this to recive notifications on major actions taken by the SDK and affect its behavior
SWIFT_PROTOCOL_NAMED("JoynedSDKDelegate")
@protocol JoynedSDKDelegate <NSObject>
@optional
/// Called when the SDK was activated successfully
- (void)mobileSDKDidActivateSuccessfully;
/// Called when the SDK failed to activate
- (void)mobileSDKDidFailToActivate;
/// An intervention location allowing to override the locale to be used when presenting SDK content on screen
- (NSString * _Nonnull)mobileSDKLocaleForPresentingContentGiven:(NSString * _Nonnull)computedLocale SWIFT_WARN_UNUSED_RESULT;
@required
/// Called when a user clicks on an offering within the Joyned UI, use this as a trigger for in-app navigation, for navigation details lokk into the payload object
- (void)mobileSDKDidTriggerNavigationFor:(JoynedOfferingResponse * _Nonnull)navigationPayload;
@end


/// A data object containing the transaction information to be reported to the Joyned servers
SWIFT_CLASS_NAMED("JoynedTransactionRequest")
@interface JoynedTransactionRequest : NSObject
/// A dictionary of transaction data stores the information extracted by the system when the request was initialized
@property (nonatomic, strong) NSDictionary * _Nonnull transaction;
/// A JSON string representation of the transaction request payload
@property (nonatomic, readonly, copy) NSString * _Nullable transactionJSON;
/// Returns a Transaction Request object with imutable payload
/// \param data transaction data to be processed by the system, in NSDictionary format
///
- (nonnull instancetype)initWithTransactionDictionary:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
/// Returns a Transaction Request object with imutable payload
/// \param data transaction data to be processed by the system, in [String: Any] format
///
- (nonnull instancetype)initWithTransaction:(NSDictionary<NSString *, id> * _Nonnull)data;
/// Returns a Transaction Request object with imutable payload
/// \param data transaction data to be processed by the system, in JSON format, parsed as part of the creation process
///
- (nullable instancetype)initWithTransactionString:(NSString * _Nonnull)transactionJSON;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




































@interface _JCardControl (SWIFT_EXTENSION(JoynedMobileSDK))
/// Indicates if the top left corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipTopLeft;
/// Indicates if the top right corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipTopRight;
/// Indicates if the bottom left corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipBottomLeft;
/// Indicates if the bottom right corner should be cliped or not, used for card UI clipping system.
/// Only takes effect if the <code>isShapeEnabled</code> is set to <code>true</code>.
@property (nonatomic) IBInspectable BOOL shouldClipBottomRight;
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
